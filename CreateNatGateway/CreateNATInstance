# Get VPC-id
$vpcid = aws ec2 describe-vpcs --filters Name=cidr,Values=10.123.0.0/16 --query 'Vpcs[].VpcId' --output text

# Get Subnet-id
$subnet2id = aws ec2 describe-subnets --filters "Name=cidr,Values=10.123.11.0/24" --query 'Subnets[].SubnetId' --output text

# Create Security-Group(SG)
aws ec2 create-security-group --group-name NATSG --description "Security Group for NAT Instnace" `
    --vpc-id ${vpcid}
$sgid = aws ec2 describe-security-groups --filters Name=group-name,Values=NATSG --query 'SecurityGroups[].GroupId' `
    --output text

# Configure SG
aws ec2 authorize-security-group-ingress --group-id ${sgid} --protocol tcp --port 80 --cidr 10.123.21.0/24
aws ec2 authorize-security-group-ingress --group-id ${sgid} --protocol tcp --port 443 --cidr 10.123.21.0/24
aws ec2 authorize-security-group-egress --group-id ${sgid} --protocol tcp --prot 80 --cidr 0.0.0.0/0
aws ec2 authorize-security-group-egress --group-id ${sgid} --protocol tcp --port 443 --cidr 0.0.0.0/0

# Check SG-config
aws ec2 describe-security-groups --filters Name=group-id,Values=${sgid} --query 'SecurityGroups[].IpPermissions[]' --output table

# Public IP activation
aws ec2 describe-subnets --filters "Name=subnet-id,Values=${subnet2id}" --query "Subnets[].{MapPublicIpOnLaunch:MapPublicIpOnLaunch}"
aws ec2 modify-subnet-attribute --subnet-id ${subnet2id} --map-public-ip-on-launch

# Create EC2()
$keypath = "C:\work\ssh\"
$keyname = "MyTraining_EC2_Linux5"
$keyfile = "${keypath}${keyname}.pem"

aws ec2 run-instances --image-id ami-00d29e4cb217ae06b --count 1 --instance-type t2.nano --key-name ${keyname} --security-group-ids `
    ${sgid} --subnet-id ${subnet2id} --tag-specifications 'ResourceType=instance,Tags=[{Key=tag1,Value=tech-kadai-NAT-instance}]'
$iid = aws ec2 describe-instances --filters "Name=tag-key,Values=tag1" "Name=tag-value,Values=tech-kadai-NAT-instance" `
    --query 'Reservations[].Instances[].InstanceId' --output text
aws ec2 modify-instance-attribute --instance-id ${iid} --no-source-dest-check


# Create Private Subnet
aws ec2 create-subnet --vpc-id ${vpcid} --cidr-block 10.123.21.0/24 --availability-zone ap-northeast-1c
$privsubnet2id = aws ec2 describe-subnets --filters "Name=cidrBlock,Values=10.123.21.0/24" --query 'Subnets[].SubnetId' --output text
aws ec2 create-tags --resources $privsubnet2id --tags Key=Name,Value=tech-kadai-private-subnet-2

# Create Route Table
aws ec2 create-route-table --vpc-id $vpcid
$rtb2id = <RTBID>

# Configure Route Table
aws ec2 create-route --route-table-id ${rtb2id} --destination-cidr-block 0.0.0.0/0 --instance-id ${iid} 
aws ec2 associate-route-table --route-table-id $rtb2id --subnet-id $privsubnet2id
